package views

import (
	"fmt"
	"github.com/RowMur/office-games/internal/db"
	"strconv"
)

templ CreateGamePage(office db.Office) {
	<main class="mx-6 my-8">
		{{
			crumbs := []Crumb{
				{Name: office.Name, URL: fmt.Sprintf("/offices/%s", office.Code)},
				{Name: "Create Game", URL: fmt.Sprintf("/offices/%s/games/create", office.Code)},
			}
		}}
		@Breadcrumbs(crumbs)
		<section class="grid place-items-center my-8">
			@CreateGameForm(FormData{}, FormErrors{}, office.Code)
		</section>
	</main>
}

templ CreateGameForm(data FormData, errors FormErrors, officeCode string) {
	<form hx-post={ fmt.Sprintf("/offices/%s/games/create", officeCode) } hx-swap="outerHTML">
		<label for="game" class="block">Name:</label>
		<div class="flex gap-4">
			<input id="game" name="game" type="text" value={ data["game"] } class="text-black grow" placeholder="The game..."/>
			<button type="submit" class="bg-accent text-light block w-16">Create</button>
		</div>
		if errors["game"] != "" {
			<p class="text-red-500">{ errors["game"] }</p>
		}
	</form>
}

templ GamePageHeading(game db.Game, office db.Office) {
	<h2 class="text-2xl font-semibold my-2 inline-block">{ game.Name } &#64; { office.Name }</h2>
}

templ GamePageTabs(currentTab string, office db.Office, game db.Game, user db.User) {
	<ul class="flex flex-wrap gap-2">
		{{
				baseURL := fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))
		}}
		@GamePageTab(baseURL, "Overview", currentTab)
		@GamePageTab(baseURL+"/play", "Play", currentTab)
		@GamePageTab(baseURL+"/pending", "Pending Matches", currentTab)
		if user.ID == office.AdminRefer {
			@GamePageTab(baseURL+"/admin", "Admin", currentTab)
		}
	</ul>
}

templ GamePageTab(href string, text string, currentTab string) {
	<li>
		<a
			href={ templ.SafeURL(href) }
			if text == currentTab {
				class="px-2 py-1 rounded bg-accent text-nowrap text-light"
			} else {
				class="px-2 py-1 rounded bg-light text-nowrap text-content"
			}
		>{ text }</a>
	</li>
}

templ GamePage(game db.Game, office db.Office, userWinLosses map[uint]WinLosses, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Overview", office, game, user)
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Rankings</h4>
			@OfficeRankings(game.Rankings, userWinLosses)
		</section>
		// if len(game.Matches) > 0 {
		// 	<section class="my-6">
		// 		<h4 class="text-lg font-semibold mb-2">Recent Matches</h4>
		// 		<div class="flex flex-col gap-2">
		// 			for i, match := range game.Matches {
		// 				if i >= 5 {
		// 					break
		// 				}
		// 				<div class="bg-light rounded">
		// 					<div class="grid grid-cols-7 p-4 gap-3">
		// 						<div class="text-center">
		// 							<p class="font-semibold">W</p>
		// 						</div>
		// 						<div class="col-span-3">
		// 							<p class="font-semibold">{ match.Winner.Username }</p>
		// 							<p>{ match.Loser.Username }</p>
		// 						</div>
		// 						<div class="col-span-3">
		// 							<p>{ fmt.Sprintf("%d +%d", match.WinnerStartingPoints, match.WinnerGainedPoints) }</p>
		// 							<p>{ fmt.Sprintf("%d -%d", match.LoserStartingPoints, match.LoserLostPoints) }</p>
		// 						</div>
		// 					</div>
		// 				</div>
		// 			}
		// 		</div>
		// 	</section>
		// }
	</main>
}

type WinLosses struct {
	Wins   int
	Losses int
}

templ OfficeRankings(rankings []db.Ranking, userWinLosses map[uint]WinLosses) {
	<table id="office-ranking" class="w-full">
		<thead class="">
			<tr class="[&>th]:text-left">
				<th class="py-4">Player</th>
				<th class="py-4">Wins</th>
				<th class="py-4">Losses</th>
				<th class="py-4 hidden sm:block">%</th>
				<th class="py-4">Points</th>
			</tr>
		</thead>
		<tbody>
			for _, ranking := range rankings {
				<tr>
					<td>{ ranking.User.Username }</td>
					<td>
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Wins) }
					</td>
					<td>
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Losses) }
					</td>
					<td class="hidden sm:block">
						{ fmt.Sprintf("%.2f", float32(userWinLosses[ranking.User.ID].Wins) / float32(userWinLosses[ranking.User.ID].Wins + userWinLosses[ranking.User.ID].Losses) * 100) }
					</td>
					<td>{ strconv.Itoa(ranking.Points) }</td>
				</tr>
			}
		</tbody>
	</table>
}

templ PlayGamePage(game db.Game, office db.Office, players []db.User, endpoint string, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Play", office, game, user)
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Play a Match</h4>
			@PlayMatchForm(FormErrors{}, players, endpoint)
		</section>
	</main>
}

templ PlayMatchForm(errors FormErrors, players []db.User, endpoint string) {
	<form hx-post={ endpoint } hx-swap="none">
		<div class="flex flex-col gap-2">
			@PlayerSelect(errors, players, "Winners")
		</div>
		<div class="flex flex-col gap-2 mt-2">
			@PlayerSelect(errors, players, "Losers")
		</div>
		<div class="flex flex-col items-center">
			<button type="submit" class="bg-accent text-light px-4 py-1 w-3/5 mx-auto rounded mt-4">Play</button>
			<div id="errorsubmit"></div>
		</div>
	</form>
}

templ PlayerSelect(errs FormErrors, players []db.User, key string) {
	<label for={ key } class="block font-semibold">{ key }</label>
	<select name={ key } class="bg-light px-4 py-1 text-light" multiple>
		for _, player := range players {
			<option value={ strconv.Itoa(int(player.ID)) }>{ player.Username }</option>
		}
	</select>
	<div id={ "error" + key }>
		if errs[key] != "" {
			<p class="text-red-500">{ errs[key] }</p>
		}
	</div>
}

templ PlayMatchFormErrors(errors FormErrors) {
	for key, err := range errors {
		{{
			id := "error" + key
		}}
		<div id={ id } hx-swap-oob="true" hx-select={ id }>
			if err != "" {
				<p class="text-red-500">{ err }</p>
			}
		</div>
	}
}

templ PendingMatchesPage(game db.Game, office db.Office, pendingMatches []db.Match, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Pending Matches", office, game, user)
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Pending Matches</h4>
			<ul class="flex flex-col gap-2">
				for _, match := range pendingMatches {
					<a href={ templ.SafeURL(fmt.Sprintf("/offices/%s/games/%s/pending/%s", office.Code, strconv.Itoa(int(game.ID)), strconv.Itoa(int(match.ID)))) }>
						<li class="bg-light rounded">
							<div class="grid grid-cols-7 p-4 gap-3">
								<div class="text-center">
									<p class="font-semibold">W</p>
								</div>
								<div class="col-span-3">
									<p class="font-semibold">
										for i, winner := range match.Winners {
											if i > 0 {
												, 
											}
											{ winner.Username }
										}
									</p>
									<p>
										for i, loser := range match.Losers {
											if i > 0 {
												, 
											}
											{ loser.Username }
										}
									</p>
								</div>
								<div class="col-span-3">
									<p class="opacity-70">
										if match.IsApprovedByWinners() {
											Approved
										} else {
											Needs Approval
										}
									</p>
									<p class="opacity-70">
										if match.IsApprovedByLosers() {
											Approved
										} else {
											Needs Approval
										}
									</p>
								</div>
							</div>
						</li>
					</a>
				}
			</ul>
		</section>
	</main>
}

templ GamePageBreadcrumb(game db.Game, office db.Office) {
	{{
		crumbs := []Crumb{
			{Name: office.Name, URL: fmt.Sprintf("/offices/%s", office.Code)},
			{Name: game.Name, URL: fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))},
		}
	}}
	@Breadcrumbs(crumbs)
}

templ PendingMatchPage(game db.Game, office db.Office, match db.Match) {
	<main class="mx-6 my-8">
		{{
			crumbs := []Crumb{
				{Name: office.Name, URL: fmt.Sprintf("/offices/%s", office.Code)},
				{Name: game.Name, URL: fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))},
				{Name: "Pending Match", URL: fmt.Sprintf("/offices/%s/games/%s/pending/%s", office.Code, strconv.Itoa(int(game.ID)), strconv.Itoa(int(match.ID)))},
			}
		}}
		@Breadcrumbs(crumbs)
		<h2 class="text-2xl font-semibold mt-4">Match of { game.Name } &#64; { office.Name }</h2>
		<p class="opacity-70">Created by { match.Creator.Username }</p>
		<div class="flex justify-evenly my-4 gap-4">
			<div class="grow">
				<h4 class="text-lg font-semibold mb-2">Winners</h4>
				<ul class="flex flex-col gap-1">
					for _, winner := range match.Winners {
						<li class="flex items-center">
							<div
								if match.IsApprovedByUser(winner.ID) {
									class="bg-green-500 size-2 inline-block mr-1 rounded-full"
								} else {
									class="bg-accent size-2 inline-block mr-1 rounded-full"
								}
							></div>
							{ winner.Username }
						</li>
					}
				</ul>
			</div>
			<div class="grow">
				<h4 class="text-lg font-semibold mb-2">Losers</h4>
				<ul class="flex flex-col gap-1">
					for _, loser := range match.Losers {
						<li class="flex items-center">
							<div
								if match.IsApprovedByUser(loser.ID) {
									class="bg-green-500 size-2 inline-block mr-1 rounded-full"
								} else {
									class="bg-accent size-2 inline-block mr-1 rounded-full"
								}
							></div>
							{ loser.Username }
						</li>
					}
				</ul>
			</div>
			{{ url := fmt.Sprintf("/offices/%s/games/%s/pending/%s/approve", office.Code, strconv.Itoa(int(game.ID)), strconv.Itoa(int(match.ID))) }}
		</div>
		<div class="flex justify-center">
			<button hx-get={ url } class="bg-accent text-light px-4 py-1 w-3/5 rounded my-4">Approve</button>
		</div>
	</main>
}

templ GameAdminPage(game db.Game, office db.Office, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Admin", office, game, user)
		<section class="my-8">
			@EditGameForm(FormData{
				"name": game.Name,
			}, FormErrors{}, office.Code, game)
		</section>
	</main>
}

templ EditGameForm(data FormData, errors FormErrors, officeCode string, game db.Game) {
	<form hx-post={ fmt.Sprintf("/offices/%s/games/%s", officeCode, strconv.Itoa(int(game.ID))) } hx-swap="outerHTML">
		<label for="name" class="block">Name:</label>
		<div class="flex gap-4">
			<input id="name" name="name" type="text" value={ data["name"] } class="text-black grow" placeholder="The game..."/>
		</div>
		if errors["name"] != "" {
			<p class="text-red-500">{ errors["name"] }</p>
		}
		<div class="flex justify-between mt-4">
			<button hx-delete={ fmt.Sprintf("/offices/%s/games/%s", officeCode, strconv.Itoa(int(game.ID))) } class="bg-red-500 text-content h-fit rounded w-16">Delete</button>
			<button type="submit" class="bg-accent text-light block w-16 rounded">Save</button>
		</div>
	</form>
}
