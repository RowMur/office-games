package views

import (
	"errors"
	"fmt"
	"github.com/RowMur/office-games/internal/db"
	"strconv"
)

templ CreateGamePage(office db.Office) {
	<main class="mx-6 my-8">
		{{
			crumbs := []Crumb{
				{Name: office.Name, URL: fmt.Sprintf("/offices/%s", office.Code)},
				{Name: "Create Game", URL: fmt.Sprintf("/offices/%s/games/create", office.Code)},
			}
		}}
		@Breadcrumbs(crumbs)
		<section class="grid place-items-center my-8">
			@CreateGameForm(FormData{}, FormErrors{}, office.Code)
		</section>
	</main>
}

templ CreateGameForm(data FormData, errors FormErrors, officeCode string) {
	<form hx-post={ fmt.Sprintf("/offices/%s/games/create", officeCode) } hx-swap="outerHTML">
		<label for="game" class="block">Name:</label>
		<div class="flex gap-4">
			<input id="game" name="game" type="text" value={ data["game"] } class="text-black grow" placeholder="The game..."/>
			<button type="submit" class="bg-accent text-light block w-16">Create</button>
		</div>
		if errors["game"] != "" {
			<p class="text-red-500">{ errors["game"] }</p>
		}
	</form>
}

templ GamePageHeading(game db.Game, office db.Office) {
	<h2 class="text-2xl font-semibold my-2 inline-block">{ game.Name } &#64; { office.Name }</h2>
}

templ GamePageTabs(currentTab string, office db.Office, game db.Game, user db.User) {
	<ul class="flex flex-wrap gap-2">
		{{
				baseURL := fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))
		}}
		@GamePageTab(baseURL, "Overview", currentTab)
		@GamePageTab(baseURL+"/play", "Play", currentTab)
		@GamePageTab(baseURL+"/pending", "Pending Matches", currentTab)
		if user.ID == office.AdminRefer {
			@GamePageTab(baseURL+"/admin", "Admin", currentTab)
		}
	</ul>
}

templ GamePageTab(href string, text string, currentTab string) {
	<li>
		<a
			href={ templ.SafeURL(href) }
			if text == currentTab {
				class="px-2 py-1 rounded bg-accent text-nowrap text-light"
			} else {
				class="px-2 py-1 rounded bg-light text-nowrap text-content"
			}
		>{ text }</a>
	</li>
}

templ GamePage(game db.Game, office db.Office, userWinLosses map[uint]WinLosses, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Overview", office, game, user)
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Rankings</h4>
			@OfficeRankings(game.Rankings, userWinLosses)
		</section>
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Recent Matches</h4>
			if len(game.Matches) == 0 {
				<p>No matches have been played yet. Go and play some { game.Name }!</p>
			} else {
				<ul class="flex flex-col gap-2">
					{{
						nOfMatchesToShow := 5
						matchesToShow := []db.Match{}
						if len(game.Matches) <= nOfMatchesToShow {
							matchesToShow = game.Matches
						} else {
							matchesToShow = game.Matches[0:nOfMatchesToShow]
						}
					}}
					for _, match := range matchesToShow {
						@Match(match, false)
					}
				</ul>
			}
		</section>
	</main>
}

type WinLosses struct {
	Wins   int
	Losses int
}

templ OfficeRankings(rankings []db.Ranking, userWinLosses map[uint]WinLosses) {
	<table id="office-ranking" class="w-full">
		<thead class="border-b-[1px] border-accent">
			<tr>
				<th></th>
				<th class="text-left">Player</th>
				<th class="text-right">Wins</th>
				<th class="text-right">Losses</th>
				<th class="hidden sm:block text-right">%</th>
				<th class="text-right">Points</th>
			</tr>
		</thead>
		<tbody>
			for i, ranking := range rankings {
				<tr>
					<td>{ fmt.Sprintf("%d", i + 1) }</td>
					<td>{ ranking.User.Username }</td>
					<td class="text-right">
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Wins) }
					</td>
					<td class="text-right">
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Losses) }
					</td>
					<td class="hidden sm:block text-right">
						{{
							wins := userWinLosses[ranking.User.ID].Wins
							losses := userWinLosses[ranking.User.ID].Losses
							total := wins + losses

							percentage := 0.0
							if total > 0 {
								percentage = float64(wins) / float64(total) * 100
							}
						}}
						{ fmt.Sprintf("%.2f", percentage) }
					</td>
					<td class="text-right">{ strconv.Itoa(ranking.Points) }</td>
				</tr>
			}
		</tbody>
	</table>
}

templ PlayGamePage(game db.Game, office db.Office, players []db.User, endpoint string, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Play", office, game, user)
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Play a Match</h4>
			@PlayMatchForm(FormErrors{}, players, endpoint)
		</section>
	</main>
}

type PlayMatchFormData struct {
	Note    string
	Winners []string
	Losers  []string
}

func ValidatePlayMatchForm(game *db.Game, formData PlayMatchFormData) error {
	participantCount := len(formData.Winners) + len(formData.Losers)
	if participantCount < game.MinParticipants {
		return errors.New(fmt.Sprintf("At least %d participants are required", game.MinParticipants))
	}
	if participantCount > game.MaxParticipants {
		return errors.New(fmt.Sprintf("At most %d participants are allowed", game.MaxParticipants))
	}

	if game.GameType == db.GameTypeHeadToHead && len(formData.Winners) != len(formData.Losers) {
		return errors.New("The number of winners and losers must be equal")
	}

	players := append(formData.Winners, formData.Losers...)
	playersMap := map[string]bool{}
	for _, player := range players {
		if playersMap[player] {
			return errors.New("A player can only be in one team")
		}
		playersMap[player] = true
	}

	return nil
}

templ PlayMatchForm(errors FormErrors, players []db.User, endpoint string) {
	<form hx-post={ endpoint } hx-swap="none">
		<div class="my-2 flex flex-col gap-2">
			<label for="note" class="block font-semibold">Note</label>
			<input type="text" class="text-black w-full" name="note" id="note" value="" placeholder="Tournament match"/>
		</div>
		<div class="flex flex-col gap-2 mt-3">
			@PlayerSelect(errors, players, "Winners")
		</div>
		<div class="flex flex-col gap-2 mt-2">
			@PlayerSelect(errors, players, "Losers")
		</div>
		<div class="flex flex-col items-center">
			<button type="submit" class="bg-accent text-light px-4 py-1 w-3/5 mx-auto rounded mt-4">Play</button>
			<div id="errorsubmit"></div>
		</div>
	</form>
}

templ PlayerSelect(errs FormErrors, players []db.User, key string) {
	<label for={ key } class="block font-semibold">{ key }</label>
	<select name={ key } id={ key } class="bg-light px-4 py-1 text-light" multiple>
		for _, player := range players {
			<option value={ strconv.Itoa(int(player.ID)) }>{ player.Username }</option>
		}
	</select>
	<div id={ "error" + key }>
		if errs[key] != "" {
			<p class="text-red-500">{ errs[key] }</p>
		}
	</div>
}

templ PlayMatchFormErrors(errors FormErrors) {
	for key, err := range errors {
		{{
			id := "error" + key
		}}
		<div id={ id } hx-swap-oob="true" hx-select={ id }>
			if err != "" {
				<p class="text-red-500">{ err }</p>
			}
		</div>
	}
}

templ PendingMatchesPage(game db.Game, office db.Office, pendingMatches []db.Match, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Pending Matches", office, game, user)
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Pending Matches</h4>
			if len(pendingMatches) == 0 {
				<p>No matches are pending approval. Go and play some { game.Name }!</p>
			} else {
				<ul class="flex flex-col gap-2">
					for _, match := range pendingMatches {
						<a href={ templ.SafeURL(fmt.Sprintf("/offices/%s/games/%s/pending/%s", office.Code, strconv.Itoa(int(game.ID)), strconv.Itoa(int(match.ID)))) }>
							@Match(match, true)
						</a>
					}
				</ul>
			}
		</section>
	</main>
}

templ GamePageBreadcrumb(game db.Game, office db.Office) {
	{{
		crumbs := []Crumb{
			{Name: office.Name, URL: fmt.Sprintf("/offices/%s", office.Code)},
			{Name: game.Name, URL: fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))},
		}
	}}
	@Breadcrumbs(crumbs)
}

templ PendingMatchPage(game db.Game, office db.Office, match db.Match) {
	<main class="mx-6 my-8">
		{{
			crumbs := []Crumb{
				{Name: office.Name, URL: fmt.Sprintf("/offices/%s", office.Code)},
				{Name: game.Name, URL: fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))},
				{Name: "Pending Match", URL: fmt.Sprintf("/offices/%s/games/%s/pending/%s", office.Code, strconv.Itoa(int(game.ID)), strconv.Itoa(int(match.ID)))},
			}
		}}
		@Breadcrumbs(crumbs)
		<h2 class="text-2xl font-semibold mt-4">Match of { game.Name } &#64; { office.Name }</h2>
		<p class="opacity-70 flex flex-wrap [&>span]:mr-2">
			<span>
				Created by: { match.Creator.Username }
			</span>
			if match.Note != "" {
				<span>
					Note: { match.Note }
				</span>
			}
		</p>
		<div class="flex justify-evenly my-4 gap-4">
			<div class="grow">
				<h4 class="text-lg font-semibold mb-2">Winners</h4>
				<ul class="flex flex-col gap-1">
					for _, winner := range match.Winners() {
						<li class="flex items-center">
							<div
								if match.IsApprovedByUser(winner.UserID) {
									class="bg-green-500 size-2 inline-block mr-1 rounded-full"
								} else {
									class="bg-accent size-2 inline-block mr-1 rounded-full"
								}
							></div>
							{ winner.User.Username }
						</li>
					}
				</ul>
			</div>
			<div class="grow">
				<h4 class="text-lg font-semibold mb-2">Losers</h4>
				<ul class="flex flex-col gap-1">
					for _, loser := range match.Losers() {
						<li class="flex items-center">
							<div
								if match.IsApprovedByUser(loser.UserID) {
									class="bg-green-500 size-2 inline-block mr-1 rounded-full"
								} else {
									class="bg-accent size-2 inline-block mr-1 rounded-full"
								}
							></div>
							{ loser.User.Username }
						</li>
					}
				</ul>
			</div>
			{{ url := fmt.Sprintf("/offices/%s/games/%s/pending/%s/approve", office.Code, strconv.Itoa(int(game.ID)), strconv.Itoa(int(match.ID))) }}
		</div>
		<div class="flex justify-center">
			<button hx-get={ url } hx-swap="none" class="bg-accent text-light px-4 py-1 w-3/5 rounded my-4">Approve</button>
		</div>
		@MatchApproveError("")
	</main>
}

templ MatchApproveError(err string) {
	{{
		id := "approve-error"
	}}
	<div id={ id } hx-swap-oob="true" hx-select={ id }>
		if err != "" {
			<p class="text-red-500 text-center">{ err }</p>
		}
	</div>
}

templ GameAdminPage(game db.Game, office db.Office, user db.User) {
	<main class="mx-6 my-8">
		@GamePageBreadcrumb(game, office)
		@GamePageHeading(game, office)
		@GamePageTabs("Admin", office, game, user)
		<section class="my-8">
			@EditGameForm(FormData{
				"name":             game.Name,
				"min-participants": strconv.Itoa(game.MinParticipants),
				"max-participants": strconv.Itoa(game.MaxParticipants),
				"game-type":        game.GameType,
			}, FormErrors{}, office.Code, game)
		</section>
	</main>
}

templ EditGameForm(data FormData, errors FormErrors, officeCode string, game db.Game) {
	<form hx-post={ fmt.Sprintf("/offices/%s/games/%s", officeCode, strconv.Itoa(int(game.ID))) } hx-swap="outerHTML" class="flex flex-col gap-2">
		<label for="name" class="block">Name:</label>
		<div class="flex gap-4">
			<input id="name" name="name" type="text" value={ data["name"] } class="text-black grow" placeholder="The game..."/>
		</div>
		if errors["name"] != "" {
			<p class="text-red-500">{ errors["name"] }</p>
		}
		<div class="flex gap-4">
			<div class="w-1/2 min-w-0">
				<label for="min-participants" class="block">Min players:</label>
				<div class="flex gap-4">
					<input id="min-participants" name="min-participants" type="number" min="0" max="100" value={ data["min-participants"] } class="text-black min-w-0 grow"/>
				</div>
				if errors["min-participants"] != "" {
					<p class="text-red-500">{ errors["min-participants"] }</p>
				}
			</div>
			<div class="w-1/2 min-w-0">
				<label for="max-participants" class="block">Max players:</label>
				<div class="flex gap-4">
					<input id="max-participants" name="max-participants" type="number" min="0" max="100" value={ data["max-participants"] } class="text-black min-w-0 grow"/>
				</div>
				if errors["max-participants"] != "" {
					<p class="text-red-500">{ errors["max-participants"] }</p>
				}
			</div>
		</div>
		<fieldset>
			<legend>Select a game type:</legend>
			for _, gameType := range db.GameTypes {
				<div>
					<input
						id={ gameType.Value }
						name="game-type"
						type="radio"
						value={ gameType.Value }
						if data["game-type"] == gameType.Value {
							checked
						}
					/>
					<label for={ gameType.Value }>{ gameType.Display }</label>
				</div>
			}
		</fieldset>
		<div class="flex justify-between mt-4">
			<button hx-delete={ fmt.Sprintf("/offices/%s/games/%s", officeCode, strconv.Itoa(int(game.ID))) } class="bg-red-500 text-content h-fit rounded w-16">Delete</button>
			<button type="submit" class="bg-accent text-light block w-16 rounded">Save</button>
		</div>
	</form>
}

templ ListOfUsers(users []db.MatchParticipant) {
	for i, user := range users {
		if i > 0 {
			, 
		}
		{ user.User.Username }
	}
}

templ Match(match db.Match, showApprovalState bool) {
	<li class="bg-light rounded p-4">
		<div class="flex gap-3">
			<div class="text-center">
				<p class="font-semibold">W</p>
			</div>
			<div class="min-w-0 grow">
				@MatchPlayerList(match.Winners(), true)
				@MatchPlayerList(match.Losers(), false)
			</div>
			if showApprovalState {
				<div>
					@MatchApprovalState(match.IsApprovedByWinners())
					@MatchApprovalState(match.IsApprovedByLosers())
				</div>
			}
		</div>
		<p class="opacity-70 mt-2 flex flex-wrap gap-2 text-xs">
			<span>
				{ match.CreatedAt.Format("02/01/06") }
			</span>
			<span>
				Created by: { match.Creator.Username }
			</span>
			if match.Note != "" {
				<span>
					Note: { match.Note }
				</span>
			}
		</p>
	</li>
}

templ MatchPlayerList(players []db.MatchParticipant, isWinners bool) {
	{{
		class := "text-ellipsis text-nowrap overflow-hidden"
		if isWinners {
			class += " font-semibold"
		}
	}}
	<p class={ class }>
		@ListOfUsers(players)
	</p>
}

templ MatchApprovalState(isApproved bool) {
	<p class="text-ellipsis text-nowrap overflow-hidden text-right">
		if isApproved {
			Approved
		} else {
			Pending
		}
	</p>
}
