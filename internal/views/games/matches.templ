package games

import (
	"github.com/RowMur/office-games/internal/db"
	"github.com/RowMur/office-games/internal/gameprocessor"
	"github.com/RowMur/office-games/internal/views/components"
	"github.com/RowMur/office-games/internal/views/layout"
)

type MatchesPageProps struct {
	User          *db.User
	Matches       []db.Match
	Office        db.Office
	Game          db.Game
	NextPage      string
	ProcessedGame *gameprocessor.Game
}

templ MatchesPage(props MatchesPageProps) {
	@layout.Base(props.User) {
		<main class="mx-6 my-8">
			@components.Breadcrumbs([]components.Crumb{
				{Name: props.Office.Name, URL: props.Office.Link()},
				{Name: props.Game.Name, URL: props.Game.Link()},
				{Name: "Matches"},
			})
			@GamePageHeading(GamePageHeadingProps{
				Game:   props.Game,
				Office: props.Office,
			})
			<section class="my-6">
				@components.SectionHeading("Matches", nil)
				<ul class="flex flex-col gap-2">
					@Matches(MatchesProps{Matches: props.Matches, Game: props.Game, NextPage: props.NextPage, ProcessedGame: props.ProcessedGame})
				</ul>
			</section>
		</main>
	}
}

type MatchesProps struct {
	Matches       []db.Match
	NextPage      string
	Game          db.Game
	ProcessedGame *gameprocessor.Game
}

templ Matches(props MatchesProps) {
	for i, match := range props.Matches {
		{{
	shouldLoadNextPage := i == len(props.Matches)-1 && props.NextPage != ""
		}}
		<div
			if shouldLoadNextPage {
				hx-get={ props.Game.Link() + "/matches?page=" + props.NextPage }
				hx-trigger="revealed"
				hx-target="#matches-indicator"
				hx-swap="outerHTML"
				hx-indicator="#matches-indicator"
			}
		>
			@components.Match(match, false, props.ProcessedGame)
		</div>
		if shouldLoadNextPage {
			<div id="matches-indicator" class="htmx-indicator">Loading...</div>
		}
	}
}
