package views

import (
	"fmt"
	"github.com/RowMur/office-games/internal/db"
	"strconv"
)

templ OfficePage(office db.Office, user *db.User, game db.Game, userWinLosses map[uint]WinLosses) {
	<main class="mx-6 my-8">
		<section class="flex justify-evenly my-8 text-center items-center">
			<div>
				<h2 class="text-3xl font-semibold">{ office.Name }</h2>
				<p>
					<i>
						Admin: { office.Admin.Username }
					</i>
				</p>
			</div>
			<div>
				<script>
				function copyCode() {
					const btn = document.getElementById("copy-code");
					const code = btn.getAttribute("data-code");
					navigator.clipboard.writeText(code);
				}
			</script>
				<button
					id="copy-code"
					onclick="copyCode()"
					class="bg-accent text-light px-4 py-1 flex items-center gap-2 rounded"
					data-code={ office.Code }
				>
					{ office.Code }
					@copyIcon()
				</button>
			</div>
		</section>
		{{
		gamesListItems := []ListSectionItem{}
		for _, game := range office.Games {
			gamesListItems = append(gamesListItems, ListSectionItem{
				Name: game.Name,
				URL:  fmt.Sprintf("/offices/%s/games/%s", office.Code, strconv.Itoa(int(game.ID))),
			})
		}

		var link *SecondaryLink
		if office.AdminRefer == user.ID {
			link = &SecondaryLink{
				Name: "Create",
				URL:  fmt.Sprintf("/offices/%s/games/create", office.Code),
			}
		}
		}}
		@ListSection("Games", gamesListItems, link)
		<section class="my-6">
			@SectionHeading("Members", nil)
			<ul class="mt-2 flex flex-col gap-2">
				for _, player := range office.Players {
					<li class="flex justify-between bg-light p-2 rounded">
						<span>{ player.Username }</span>
						if office.Admin.ID == player.ID {
							<span>admin</span>
						}
					</li>
				}
			</ul>
		</section>
		// <section class="px-6">
		// 	<h3 class="text-xl font-semibold mb-2">Games</h3>
		// 	<div class="flex gap-2">
		// 		for _, game := range office.Games {
		// 			@Game(office, game)
		// 		}
		// 		if office.Admin.ID == user.ID {
		// 			<a class="border-light border-2 px-4 py-1 flex items-center gap-2 rounded" href={ templ.SafeURL(fmt.Sprintf("/offices/%s/games/create", office.Code)) }>+</a>
		// 		}
		// 	</div>
		// 	<section class="my-6">
		// 		<h4 class="text-lg font-semibold mb-2">Log Match</h4>
		// 		<form hx-post={ fmt.Sprintf("/play?game=%s", strconv.Itoa(int(game.ID))) } hx-swap="outerHTML" hx-target="#office-ranking" class="flex items-center justify-between gap-4">
		// 			<select id="opponent" name="opponent" class="bg-inherit border-light rounded-full border-2 p-2 w-1/2 grow">
		// 				for _, player := range office.Players {
		// 					if player.Username != user.Username {
		// 						<option value={ strconv.Itoa(int(player.ID)) }>{ player.Username }</option>
		// 					}
		// 				}
		// 			</select>
		// 			<div>
		// 				<label for="win">Win?</label>
		// 				<input id="win" name="win" type="checkbox" checked class="accent-accent"/>
		// 			</div>
		// 			<button type="submit" class="bg-accent text-light px-4 py-1 flex items-center gap-2 rounded">Log</button>
		// 		</form>
		// 	</section>
		// 	<section class="my-6">
		// 		<h4 class="text-lg font-semibold mb-2">Rankings</h4>
		// 		@OfficeRankings(game.Rankings, userWinLosses)
		// 	</section>
		// 	// TODO: make this dynamic for when a match is logged
		// 	if len(game.Matches) > 0 {
		// 		<section class="my-6">
		// 			<h4 class="text-lg font-semibold mb-2">Recent Matches</h4>
		// 			<div class="flex flex-col gap-2">
		// 				for i, match := range game.Matches {
		// 					if i >= 5 {
		// 						break
		// 					}
		// 					<div class="bg-light rounded">
		// 						<div class="grid grid-cols-7 p-4 gap-3">
		// 							<div class="text-center">
		// 								<p class="font-semibold">W</p>
		// 							</div>
		// 							<div class="col-span-3">
		// 								<p class="font-semibold">{ match.Winner.Username }</p>
		// 								<p>{ match.Loser.Username }</p>
		// 							</div>
		// 							<div class="col-span-3">
		// 								<p>{ fmt.Sprintf("%d +%d", match.WinnerStartingPoints, match.WinnerGainedPoints) }</p>
		// 								<p>{ fmt.Sprintf("%d -%d", match.LoserStartingPoints, match.LoserLostPoints) }</p>
		// 							</div>
		// 						</div>
		// 					</div>
		// 				}
		// 			</div>
		// 		</section>
		// 	}
		// </section>
	</main>
}

templ copyIcon() {
	<svg class="inline-block size-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M20.9983 10C20.9862 7.82497 20.8897 6.64706 20.1213 5.87868C19.2426 5 17.8284 5 15 5H12C9.17157 5 7.75736 5 6.87868 5.87868C6 6.75736 6 8.17157 6 11V16C6 18.8284 6 20.2426 6.87868 21.1213C7.75736 22 9.17157 22 12 22H15C17.8284 22 19.2426 22 20.1213 21.1213C21 20.2426 21 18.8284 21 16V15" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path>
		<path d="M3 10V16C3 17.6569 4.34315 19 6 19M18 5C18 3.34315 16.6569 2 15 2H11C7.22876 2 5.34315 2 4.17157 3.17157C3.51839 3.82475 3.22937 4.69989 3.10149 6" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path>
	</svg>
}

type WinLosses struct {
	Wins   int
	Losses int
}

templ OfficeRankings(rankings []db.Ranking, userWinLosses map[uint]WinLosses) {
	<table id="office-ranking" class="w-full">
		<thead class="">
			<tr class="[&>th]:text-left">
				<th class="py-4">Player</th>
				<th class="py-4">Wins</th>
				<th class="py-4">Losses</th>
				<th class="py-4 hidden sm:block">%</th>
				<th class="py-4">Points</th>
			</tr>
		</thead>
		<tbody>
			for _, ranking := range rankings {
				<tr>
					<td>{ ranking.User.Username }</td>
					<td>
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Wins) }
					</td>
					<td>
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Losses) }
					</td>
					<td class="hidden sm:block">
						{ fmt.Sprintf("%.2f", float32(userWinLosses[ranking.User.ID].Wins) / float32(userWinLosses[ranking.User.ID].Wins + userWinLosses[ranking.User.ID].Losses) * 100) }
					</td>
					<td>{ strconv.Itoa(ranking.Points) }</td>
				</tr>
			}
		</tbody>
	</table>
}
