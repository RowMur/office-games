package games

import (
	"fmt"
	"github.com/RowMur/office-table-tennis/internal/db"
	"github.com/RowMur/office-table-tennis/internal/officeprocessor"
	"github.com/RowMur/office-table-tennis/internal/views/components"
	"github.com/RowMur/office-table-tennis/internal/views/layout"
	"strconv"
)

type WinLosses struct {
	Wins   int
	Losses int
}

type UserWinLosses map[uint]WinLosses

type OfficePageProps struct {
	Office            db.Office
	User              *db.User
	PendingMatchCount int
	ProcessedOffice   *officeprocessor.Office
}

templ OfficePage(props OfficePageProps) {
	@layout.Base(props.User) {
		<main class="mx-6 my-8">
			// @components.Breadcrumbs([]components.Crumb{
			// 	{Name: props.Office.Name, URL: props.Office.Link()},
			// 	{Name: props.Game.Name},
			// })
			@GamePageHeading(GamePageHeadingProps{
				Office: props.Office,
			})
			<ul class="mt-2 flex flex-wrap gap-2">
				@GamePageAction(props.Office.Link() + "/play") {
					<div class="flex flex-col gap-2">
						<div class="w-12 h-12 grid place-items-center border-accent rounded-full border-2">
							VS
						</div>
						<p class="text-center">Play</p>
					</div>
				}
				@GamePageAction(props.Office.Link() + "/pending") {
					<div class="flex flex-col gap-2">
						<div class="w-12 h-12 grid place-items-center border-accent rounded-full border-2 mx-auto">
							{ strconv.Itoa(props.PendingMatchCount) }
						</div>
						<p class="text-center">Pending</p>
					</div>
				}
			</ul>
			<section class="my-6">
				@components.SectionHeading("Rankings", nil)
				@OfficeRankings(props.ProcessedOffice.RankedPlayers())
			</section>
			<section class="my-6">
				@components.SectionHeading("Stats", &components.SecondaryLinkProps{
					URL:  props.Office.Link() + "/stats",
					Name: "See more",
				})
				<div class="mt-2 flex flex-wrap gap-2">
					@StatCard() {
						<div class="flex flex-col gap-2">
							<div class="min-w-12 min-h-12 grid place-items-center text-center rounded-full mx-auto">
								<b>
									{ strconv.Itoa(len(props.Office.Matches)) }
								</b>
							</div>
							<p class="text-center"><i>Matches Played</i></p>
						</div>
					}
					@StatCard() {
						<div class="flex flex-col gap-2">
							<div class="min-w-12 min-h-12 grid place-items-center text-center rounded-full mx-auto">
								{{
									recordElo := props.ProcessedOffice.RecordElo()
								}}
								<b>{ strconv.Itoa(recordElo.RecordPoints) }</b>
								{ recordElo.User.Username } - 
								{ recordElo.RecordPointsDate.Format("02/01/2006") }
							</div>
							<p class="text-center"><i>Record ELO</i></p>
						</div>
					}
				</div>
			</section>
			<section class="my-6">
				@components.SectionHeading("Recent Matches", &components.SecondaryLinkProps{
					URL:  props.Office.Link() + "/matches",
					Name: "All Matches",
				})
				if len(props.Office.Matches) == 0 {
					<p>No matches have been played yet. Go and play some table tennis!</p>
				} else {
					<ul class="flex flex-col gap-2">
						{{
						nOfMatchesToShow := 5
						matchesToShow := []db.Match{}
						if len(props.Office.Matches) <= nOfMatchesToShow {
							matchesToShow = props.Office.Matches
						} else {
							matchesToShow = props.Office.Matches[0:nOfMatchesToShow]
						}
						}}
						for _, match := range matchesToShow {
							@components.Match(match, false, props.ProcessedOffice)
						}
					</ul>
				}
			</section>
		</main>
	}
}

templ GamePageAction(url string) {
	<a href={ templ.SafeURL(url) } class="bg-light p-2 w-fit rounded grow">
		<li class="flex justify-center">
			{ children... }
		</li>
	</a>
}

templ StatCard() {
	<div class="bg-light p-2 w-fit rounded grow flex justify-center">
		{ children... }
	</div>
}

templ OfficeRankings(players []officeprocessor.Player) {
	<table id="office-ranking" class="w-full">
		<thead class="border-b-[1px] border-accent">
			<tr>
				<th class="w-px"></th>
				<th class="text-left pl-1">Player</th>
				<th class="text-right">Wins</th>
				<th class="text-right">Losses</th>
				<th class="hidden sm:block text-right">%</th>
				<th class="text-right">Points</th>
			</tr>
		</thead>
		<tbody>
			for i, player := range players {
				<tr>
					<td class="text-right opacity-70">#{ fmt.Sprintf("%d", i + 1) }</td>
					<td class="pl-1">{ player.User.Username }</td>
					<td class="text-right">
						{ strconv.Itoa(player.WinCount) }
					</td>
					<td class="text-right">
						{ strconv.Itoa(player.LossCount) }
					</td>
					<td class="hidden sm:block text-right">
						{ fmt.Sprintf("%.2f", player.Percentage()) }
					</td>
					<td class="text-right">{ strconv.Itoa(player.Points) }</td>
				</tr>
			}
		</tbody>
	</table>
}
