package views

import (
	"fmt"
	"github.com/RowMur/office-games/internal/db"
	"strconv"
)

templ Page(contents templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<script src="https://cdn.tailwindcss.com"></script>
			<script src="https://unpkg.com/htmx.org@2.0.2" integrity="sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ" crossorigin="anonymous"></script>
			<title>Office Games</title>
		</head>
		<body class="bg-[#2D3250] text-slate-200 w-11/12 max-w-lg mx-auto h-svh">
			@contents
			<hr/>
			<footer class="text-center py-4">
				<p>
					Found an issue? <a href="https://github.com/RowMur/office-games/issues" class="underline text-[#F6B17A]">Report</a>
				</p>
			</footer>
		</body>
	</html>
}

templ Header(currentUser db.User) {
	<header class="flex justify-between items-center gap-4">
		<h1 class="my-4 text-3xl"><a href="/">Office Games</a></h1>
		<a href="/me">
			<div class="w-12 h-12 my-4 grid place-items-center border-white rounded-full border-2">
				{ string(currentUser.Username[0]) }
			</div>
		</a>
	</header>
	<hr/>
}

templ MainPage(currentUser db.User, hasOffice bool, offices []db.Office) {
	@Header(currentUser)
	<main class="mt-4">
		if hasOffice {
			<section>
				<h2 class="text-xl">Your Offices:</h2>
				<ul class="list-disc list-inside">
					for _, office := range offices {
						<li>
							<a href={ templ.SafeURL("/office/" + office.Code) }>{ office.Name }</a>
						</li>
					}
				</ul>
			</section>
		}
		<div class="w-full grid place-items-center my-8">
			<section class="w-full">
				<h2 class="text-center text-xl">Create new Office</h2>
				@CreateOfficeForm(FormData{}, FormErrors{})
			</section>
			<p class="text-center my-6">or</p>
			<section class="w-full">
				<h2 class="text-center text-xl">Join an existing Office</h2>
				@JoinOfficeForm(FormData{}, FormErrors{})
			</section>
		</div>
	</main>
}

templ CreateOfficeForm(data FormData, errors FormErrors) {
	<form hx-post="/create-office" hx-swap="outerHTML">
		<label for="office" class="block">Name:</label>
		<div class="flex gap-4">
			<input id="office" name="office" type="text" value={ data["office"] } class="text-black grow" placeholder="The office..."/>
			<button type="submit" class="bg-blue-500 text-white block w-16">Create</button>
		</div>
		if errors["office"] != "" {
			<p class="text-red-500">{ errors["office"] }</p>
		}
	</form>
}

templ JoinOfficeForm(data FormData, errors FormErrors) {
	<form hx-post="/join-office" hx-swap="outerHTML">
		<label for="office" class="block">Code:</label>
		<div class="flex gap-4">
			<input id="office" name="office" type="text" value={ data["office"] } class="text-black grow" placeholder="ABCDEF"/>
			<button type="submit" class="bg-blue-500 text-white block w-16">Join</button>
		</div>
		if errors["office"] != "" {
			<p class="text-red-500">{ errors["office"] }</p>
		}
	</form>
}

templ OfficePage(office db.Office, user db.User, game db.Game, userWinLosses map[uint]WinLosses) {
	@Heading(user)
	<section class="flex justify-evenly my-8 text-center px-6 items-center">
		<div>
			<h2 class="text-3xl font-semibold">{ office.Name }</h2>
			<p>
				<i>
					Admin: { office.Admin.Username }
				</i>
			</p>
		</div>
		<div>
			<script>
				function copyCode() {
					const btn = document.getElementById("copy-code");
					const code = btn.getAttribute("data-code");
					navigator.clipboard.writeText(code);
				}
			</script>
			<button
				id="copy-code"
				onclick="copyCode()"
				class="bg-[#F6B17A] text-[#424769] px-4 py-1 flex items-center gap-2 rounded"
				data-code={ office.Code }
			>
				{ office.Code }
				@copyIcon()
			</button>
		</div>
	</section>
	<section class="px-6">
		<h3 class="text-xl font-semibold mb-2">Games</h3>
		<div class="flex gap-2">
			for _, game := range office.Games {
				@Game(office, game)
			}
			if office.Admin.ID == user.ID {
				<a class="border-[#424769] border-2 px-4 py-1 flex items-center gap-2 rounded" href={ templ.SafeURL(fmt.Sprintf("/office/%s/games/create", office.Code)) }>+</a>
			}
		</div>
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Log Match</h4>
			<form hx-post={ fmt.Sprintf("/play?game=%s", strconv.Itoa(int(game.ID))) } hx-swap="outerHTML" hx-target="#office-ranking" class="flex items-center justify-between gap-4">
				<select id="opponent" name="opponent" class="bg-inherit border-[#424769] rounded-full border-2 p-2 w-1/2 grow">
					for _, player := range office.Players {
						if player.Username != user.Username {
							<option value={ strconv.Itoa(int(player.ID)) }>{ player.Username }</option>
						}
					}
				</select>
				<div>
					<label for="win">Win?</label>
					<input id="win" name="win" type="checkbox" checked class="accent-[#F6B17A]"/>
				</div>
				<button type="submit" class="bg-[#F6B17A] text-[#424769] px-4 py-1 flex items-center gap-2 rounded">Log</button>
			</form>
		</section>
		<section class="my-6">
			<h4 class="text-lg font-semibold mb-2">Rankings</h4>
			@OfficeRankings(game.Rankings, userWinLosses)
		</section>
		// TODO: make this dynamic for when a match is logged
		if len(game.Matches) > 0 {
			<section class="my-6">
				<h4 class="text-lg font-semibold mb-2">Recent Matches</h4>
				<div class="flex flex-col gap-2">
					for i, match := range game.Matches {
						if i >= 5 {
							break
						}
						<div class="bg-[#424769] rounded">
							<div class="grid grid-cols-7 p-4 gap-3">
								<div class="text-center">
									<p class="font-semibold">W</p>
								</div>
								<div class="col-span-3">
									<p class="font-semibold">{ match.Winner.Username }</p>
									<p>{ match.Loser.Username }</p>
								</div>
								<div class="col-span-3">
									<p>{ fmt.Sprintf("%d +%d", match.WinnerStartingPoints, match.WinnerGainedPoints) }</p>
									<p>{ fmt.Sprintf("%d -%d", match.LoserStartingPoints, match.LoserLostPoints) }</p>
								</div>
							</div>
						</div>
					}
				</div>
			</section>
		}
	</section>
}

templ Game(office db.Office, game db.Game) {
	// TODO: create the handlers for these pages...
	<a class="bg-[#424769] px-4 py-1 flex items-center gap-2 rounded" href={ templ.SafeURL(fmt.Sprintf("/office/%s/games/%s", office.Code, strconv.Itoa(int(game.ID)))) }>
		{ game.Name }
	</a>
}

templ Heading(user db.User) {
	<nav class="bg-[#424769] p-6 rounded-b-3xl flex justify-between items-center">
		<h1 class="text-2xl font-bold"><a href="/">Office Games</a></h1>
		<a href="/me">
			<div class="w-12 h-12 grid place-items-center border-[#F6B17A] rounded-full border-2">
				{ string(user.Username[0]) }
			</div>
		</a>
	</nav>
}

templ copyIcon() {
	<svg class="inline-block size-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M20.9983 10C20.9862 7.82497 20.8897 6.64706 20.1213 5.87868C19.2426 5 17.8284 5 15 5H12C9.17157 5 7.75736 5 6.87868 5.87868C6 6.75736 6 8.17157 6 11V16C6 18.8284 6 20.2426 6.87868 21.1213C7.75736 22 9.17157 22 12 22H15C17.8284 22 19.2426 22 20.1213 21.1213C21 20.2426 21 18.8284 21 16V15" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path>
		<path d="M3 10V16C3 17.6569 4.34315 19 6 19M18 5C18 3.34315 16.6569 2 15 2H11C7.22876 2 5.34315 2 4.17157 3.17157C3.51839 3.82475 3.22937 4.69989 3.10149 6" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path>
	</svg>
}

templ CreateGameForm(data FormData, errors FormErrors) {
	<form hx-post="/create-game" hx-swap="outerHTML">
		<label for="game" class="block">Name:</label>
		<div class="flex gap-4">
			<input id="game" name="game" type="text" value={ data["game"] } class="text-black grow" placeholder="The game..."/>
			<button type="submit" class="bg-blue-500 text-white block w-16">Create</button>
		</div>
		if errors["game"] != "" {
			<p class="text-red-500">{ errors["game"] }</p>
		}
	</form>
}

type WinLosses struct {
	Wins   int
	Losses int
}

templ OfficeRankings(rankings []db.Ranking, userWinLosses map[uint]WinLosses) {
	<table id="office-ranking" class="w-full">
		<thead class="">
			<tr class="[&>th]:text-left">
				<th class="py-4">Player</th>
				<th class="py-4">Wins</th>
				<th class="py-4">Losses</th>
				<th class="py-4 hidden sm:block">%</th>
				<th class="py-4">Points</th>
			</tr>
		</thead>
		<tbody>
			for _, ranking := range rankings {
				<tr>
					<td>{ ranking.User.Username }</td>
					<td>
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Wins) }
					</td>
					<td>
						{ strconv.Itoa(userWinLosses[ranking.User.ID].Losses) }
					</td>
					<td class="hidden sm:block">
						{ fmt.Sprintf("%.2f", float32(userWinLosses[ranking.User.ID].Wins) / float32(userWinLosses[ranking.User.ID].Wins + userWinLosses[ranking.User.ID].Losses) * 100) }
					</td>
					<td>{ strconv.Itoa(ranking.Points) }</td>
				</tr>
			}
		</tbody>
	</table>
}

type FormErrors map[string]string
type FormData map[string]string

templ SignInPage() {
	<main class="grid place-items-center h-full">
		<div class="flex flex-col gap-4">
			@SignInForm(FormData{}, FormErrors{})
			<hr/>
			<p class="text-center">
				Don&apos;t have an account?
				<br/>
				<a href="/create-account" class="underline">Create account</a>
			</p>
		</div>
	</main>
}

templ SignInForm(data FormData, errors FormErrors) {
	<form hx-post="/sign-in" hx-swap="outerHTML">
		@formField("username", "Username", "text", data, errors)
		@formField("password", "Password", "password", data, errors)
		<button type="submit" class="bg-blue-500 text-white block mx-auto mt-4 px-4 py-1">Sign In</button>
	</form>
}

templ CreateAccountPage() {
	<main class="grid place-items-center h-full">
		<div class="flex flex-col gap-4">
			@CreateAccountForm(FormData{}, FormErrors{})
			<hr/>
			<p class="text-center">
				Already have an account?
				<br/>
				<a href="/sign-in" class="underline">Sign in</a>
			</p>
		</div>
	</main>
}

templ CreateAccountForm(data FormData, errors FormErrors) {
	<form hx-post="/create-account" hx-swap="outerHTML">
		@formField("username", "Username", "text", data, errors)
		@formField("email", "Email", "email", data, errors)
		@formField("password", "Password", "password", data, errors)
		@formField("confirm", "Confirm Password", "password", data, errors)
		<button type="submit" class="bg-blue-500 text-white block mx-auto mt-4 px-4 py-1">Create Account</button>
	</form>
}

templ formField(name string, display string, inputType string, data FormData, errors FormErrors) {
	<label for={ name } class="block">{ display }:</label>
	<input
		id={ name }
		name={ name }
		type={ inputType }
		value={ data[name] }
		class="text-black w-full"
	/>
	if errors[name] != "" {
		<p class="text-red-500">{ errors[name] }</p>
	}
}

templ MePage(user db.User, data FormData, errors FormErrors) {
	<main class="grid place-items-center h-full">
		<div class="flex flex-col gap-4">
			<nav class="flex justify-evenly">
				<a href="/" class="underline">Home</a>
				<a href="/sign-out" class="underline">Sign out</a>
			</nav>
			<hr/>
			<section>
				<h2 class="text-xl pb-4">Details</h2>
				@UserDetails(data, errors, nil)
			</section>
			<p class="text-center"></p>
			<p class="text-center"></p>
		</div>
	</main>
}

templ UserDetails(data FormData, errors FormErrors, didUpdateSuccessfully *bool) {
	<form hx-post="/me" hx-swap="outerHTML">
		@formField("username", "Username", "text", data, errors)
		@formField("email", "Email", "email", data, errors)
		<button type="submit" class="bg-blue-500 text-white block mx-auto mt-4 px-4 py-1">Save</button>
		if didUpdateSuccessfully == nil {
		} else if *didUpdateSuccessfully {
			<p class="text-green-500 text-center">Updated successfully</p>
		} else {
			<p class="text-red-500 text-center">Failed to update</p>
		}
	</form>
}
